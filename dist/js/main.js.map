{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["const textName = document.querySelector('[data-txt-name]');\r\nconst textNumber = document.querySelector('[data-txt-number]');\r\nconst textMonth = document.querySelector('[data-txt-month]');\r\nconst textYear = document.querySelector('[data-txt-year]');\r\nconst textCvc = document.querySelector('[data-txt-cvc]');\r\nconst form = document.querySelector('[data-form]');\r\nconst inputName = document.querySelector('[data-inp-name]');\r\nconst inputNumber = document.querySelector('[data-inp-number]');\r\nconst inputMonth = document.querySelector('[data-inp-month]');\r\nconst inputYear = document.querySelector('[data-inp-year]');\r\nconst inputCvc = document.querySelector('[data-inp-cvc]');\r\nconst success = document.querySelector('[data-success]');\r\nconst brand = {\r\n  visa: {\r\n    filter: /^4[0-9]{12}(?:[0-9]{3})?$/,\r\n    src: 'dist/images/cc-logos/cc-visa.svg',\r\n  },\r\n  masterCard: {\r\n    filter: /^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$/,\r\n    src: 'dist/images/cc-logos/cc-mastercard.svg',\r\n  },\r\n  americanExpress: {\r\n    filter: /^3[47][0-9]{13}$/,\r\n    src: 'dist/images/cc-logos/cc-american-express.svg',\r\n  },\r\n  dinersClub: {\r\n    filter: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\r\n    src: 'dist/images/cc-logos/cc-diners-club.svg',\r\n  },\r\n  discover: {\r\n    filter: /^6(?:011|5[0-9]{2})[0-9]{12}$/,\r\n    src: 'dist/images/cc-logos/cc-discover.svg',\r\n  },\r\n  jcb: {\r\n    filter: /^(?:2131|1800|35\\d{3})\\d{11}$/,\r\n    src: 'dist/images/cc-logos/cc-jcb.svg',\r\n  },\r\n  default: {\r\n    filter: /^\\d{16}$/,\r\n    src: 'dist/images/cc-logos/cc-default.svg',\r\n  },\r\n  testValue(brandName, value) {\r\n    return brand.getFilter(brandName).test(value);\r\n  },\r\n  getFilter(brandName) {\r\n    return brand[brandName].filter;\r\n  },\r\n  getSrc(brandName) {\r\n    return brand[brandName].src;\r\n  },\r\n};\r\n\r\nform.addEventListener('input', filterInput);\r\nform.addEventListener('submit', validateFormSubmit);\r\nsuccess.addEventListener('click', filterSuccessClick);\r\n\r\nfunction filterInput(evt) {\r\n  const { target, inputType, data } = evt;\r\n  let textElement = null;\r\n  let isValid = false;\r\n\r\n  switch (target) {\r\n    case inputName:\r\n      isValid = validateInputValue(target, /^(?!\\s)[a-zA-Z]*(?:[\\s]?[a-zA-Z]*)*$/);\r\n      textElement = textName;\r\n      break;\r\n    case inputNumber:\r\n      const isDelete = inputType === 'deleteContentBackward' || inputType === 'deleteContentForward';\r\n      const value = data === ' ' ? target.value : removeSpaces(target.value);\r\n      isValid = validateInputValue(target, /^\\d{0,16}$/, value);\r\n      isValid && formatCreditCardNumber(target, isDelete);\r\n      textElement = textNumber;\r\n      break;\r\n    case inputMonth:\r\n      isValid = validateInputValue(target, /^(0[1-9]?|1[0-2]?)?$/);\r\n      textElement = textMonth;\r\n      break;\r\n    case inputYear:\r\n      isValid = validateInputValue(target, /^\\d{0,2}$/);\r\n      textElement = textYear;\r\n      break;\r\n    case inputCvc:\r\n      isValid = validateInputValue(target, /^\\d{0,3}$/);\r\n      textElement = textCvc;\r\n      break;\r\n  }\r\n\r\n  isValid && setCardText(textElement, target.value);\r\n}\r\n\r\nfunction filterSuccessClick({ target }) {\r\n  if (!target.hasAttribute('data-btn-close')) return;\r\n\r\n  verifyCreditCardBrand();\r\n  setCardText();\r\n  this.classList.add('hidden');\r\n  form.classList.remove('hidden');\r\n}\r\n\r\nfunction validateInputValue(input, filter, value = input.value) {\r\n  let cursor = input.selectionStart;\r\n  let isValid = false;\r\n\r\n  if (filter.test(value)) {\r\n    input.oldValue = input.value;\r\n    isValid = true;\r\n    hasInvalid(input) && removeErrorMessage(input);\r\n  } else if (input.hasOwnProperty('oldValue')) {\r\n    if (input.value === input.oldValue) return isValid;\r\n    input.value = input.oldValue;\r\n    cursor--;\r\n    input.setSelectionRange(cursor, cursor);\r\n  } else {\r\n    input.value = '';\r\n  }\r\n  return isValid;\r\n}\r\n\r\nfunction resetInputsOldValue() {\r\n  const formInputs = form.querySelectorAll('[data-form-input]');\r\n\r\n  for (let index = 0; index < formInputs.length; index++) {\r\n    formInputs[index].oldValue = '';\r\n  }\r\n}\r\n\r\nfunction formatCreditCardNumber(input, isDelete) {\r\n  const { value } = input;\r\n\r\n  if (!value.length) return verifyCreditCardBrand();\r\n\r\n  let cursor = input.selectionStart;\r\n  const formattedValue = removeSpaces(value)\r\n    .match(/\\d{1,4}/g)\r\n    .join(' ');\r\n  input.value = formattedValue;\r\n  input.oldValue = formattedValue;\r\n\r\n  if (\r\n    ((formattedValue.length > value.length && formattedValue.length <= cursor && formattedValue.charAt(cursor - 1) !== ' ') ||\r\n      formattedValue.charAt(cursor - 1) === ' ') &&\r\n    !isDelete\r\n  ) {\r\n    cursor++;\r\n  }\r\n  input.setSelectionRange(cursor, cursor);\r\n  verifyCreditCardBrand(input);\r\n}\r\n\r\nfunction verifyCreditCardBrand(input) {\r\n  const cardLogo = document.querySelector('[data-card-logo]');\r\n\r\n  if (!input) return (cardLogo.src = brand.getSrc('default'));\r\n\r\n  const { testValue, getFilter, getSrc } = brand;\r\n  const value = removeSpaces(input.value);\r\n\r\n  for (const brandName in brand) {\r\n    if (brand[brandName].filter && testValue(brandName, value)) {\r\n      cardLogo.src = getSrc(brandName);\r\n      return getFilter(brandName);\r\n    }\r\n  }\r\n\r\n  cardLogo.src = getSrc('default');\r\n  return getFilter('default');\r\n}\r\n\r\nfunction removeSpaces(value) {\r\n  return value.replace(/\\s+/g, '');\r\n}\r\n\r\nfunction hasInvalid(element) {\r\n  return element.classList.contains('invalid');\r\n}\r\n\r\nfunction getFirstDatasetProperty({ dataset }) {\r\n  for (const key in dataset) {\r\n    if (dataset.hasOwnProperty(key)) {\r\n      return dataset[key];\r\n    }\r\n  }\r\n}\r\n\r\nfunction setCardText(textElement, value = '') {\r\n  const textElements = textElement ? [textElement] : [...document.querySelectorAll('[data-card-text]')];\r\n\r\n  textElements.forEach(textElement => {\r\n    const placeholder = getFirstDatasetProperty(textElement);\r\n    textElement.innerText = value.length ? value : placeholder;\r\n  });\r\n}\r\n\r\nfunction validateFormSubmit(evt) {\r\n  evt.preventDefault();\r\n  const formInputs = form.querySelectorAll('[data-form-input]');\r\n\r\n  formInputs.forEach(input => {\r\n    if (!input.value.length) {\r\n      return addErrorMessage(input, \"Can't be blank\");\r\n    }\r\n    if (!isInputFilled(input)) {\r\n      return addErrorMessage(input, 'Wrong format');\r\n    }\r\n  });\r\n\r\n  if (form.querySelector('[data-txt-error]')) return;\r\n\r\n  form.classList.add('hidden');\r\n  success.classList.remove('hidden');\r\n  form.reset();\r\n  resetInputsOldValue();\r\n}\r\n\r\nfunction addErrorMessage(element, message) {\r\n  const wrapper = element.closest('[data-form-wrapper]');\r\n  let error = wrapper.querySelector('[data-txt-error]');\r\n  element.classList.add('invalid');\r\n\r\n  if (error) return (error.innerText = message);\r\n\r\n  error = document.createElement('span');\r\n  error.classList.add('form__error');\r\n  error.dataset.txtError = '';\r\n  error.innerText = message;\r\n  wrapper.appendChild(error);\r\n}\r\n\r\nfunction removeErrorMessage(element) {\r\n  const wrapper = element.closest('[data-form-wrapper]');\r\n  element.classList.remove('invalid');\r\n\r\n  if (wrapper.dataset.formWrapper === 'date') {\r\n    const inputs = [...wrapper.querySelectorAll('[data-form-input]')];\r\n    const invalid = inputs.reduce((acc, cur) => {\r\n      if (acc) return acc;\r\n      acc = hasInvalid(cur);\r\n      return acc;\r\n    }, false);\r\n\r\n    if (invalid) return;\r\n  }\r\n  wrapper.removeChild(wrapper.querySelector('[data-txt-error]'));\r\n}\r\n\r\nfunction isInputFilled(input) {\r\n  switch (input) {\r\n    case inputName:\r\n      return validateInputValue(input, /^[a-zA-Z]+(?:[\\s]+[a-zA-Z]+)*$/);\r\n    case inputNumber:\r\n      return validateInputValue(input, verifyCreditCardBrand(input), removeSpaces(input.value));\r\n    case inputMonth:\r\n      return validateInputValue(input, /^(0[1-9]|1[0-2])$/);\r\n    case inputYear:\r\n      return validateInputValue(input, /^\\d{2}$/);\r\n    case inputCvc:\r\n      return validateInputValue(input, /^\\d{3}$/);\r\n  }\r\n}\r\n"],"file":"main.js"}